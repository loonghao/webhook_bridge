// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/proto/webhook.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebhookExecutor_ExecutePlugin_FullMethodName = "/webhook.WebhookExecutor/ExecutePlugin"
	WebhookExecutor_ListPlugins_FullMethodName   = "/webhook.WebhookExecutor/ListPlugins"
	WebhookExecutor_GetPluginInfo_FullMethodName = "/webhook.WebhookExecutor/GetPluginInfo"
	WebhookExecutor_HealthCheck_FullMethodName   = "/webhook.WebhookExecutor/HealthCheck"
)

// WebhookExecutorClient is the client API for WebhookExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WebhookExecutor service for executing webhook plugins
type WebhookExecutorClient interface {
	// Execute a webhook plugin
	ExecutePlugin(ctx context.Context, in *ExecutePluginRequest, opts ...grpc.CallOption) (*ExecutePluginResponse, error)
	// List available plugins
	ListPlugins(ctx context.Context, in *ListPluginsRequest, opts ...grpc.CallOption) (*ListPluginsResponse, error)
	// Get plugin information
	GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type webhookExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookExecutorClient(cc grpc.ClientConnInterface) WebhookExecutorClient {
	return &webhookExecutorClient{cc}
}

func (c *webhookExecutorClient) ExecutePlugin(ctx context.Context, in *ExecutePluginRequest, opts ...grpc.CallOption) (*ExecutePluginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutePluginResponse)
	err := c.cc.Invoke(ctx, WebhookExecutor_ExecutePlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookExecutorClient) ListPlugins(ctx context.Context, in *ListPluginsRequest, opts ...grpc.CallOption) (*ListPluginsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPluginsResponse)
	err := c.cc.Invoke(ctx, WebhookExecutor_ListPlugins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookExecutorClient) GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, WebhookExecutor_GetPluginInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookExecutorClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, WebhookExecutor_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookExecutorServer is the server API for WebhookExecutor service.
// All implementations must embed UnimplementedWebhookExecutorServer
// for forward compatibility.
//
// WebhookExecutor service for executing webhook plugins
type WebhookExecutorServer interface {
	// Execute a webhook plugin
	ExecutePlugin(context.Context, *ExecutePluginRequest) (*ExecutePluginResponse, error)
	// List available plugins
	ListPlugins(context.Context, *ListPluginsRequest) (*ListPluginsResponse, error)
	// Get plugin information
	GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedWebhookExecutorServer()
}

// UnimplementedWebhookExecutorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebhookExecutorServer struct{}

func (UnimplementedWebhookExecutorServer) ExecutePlugin(context.Context, *ExecutePluginRequest) (*ExecutePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePlugin not implemented")
}
func (UnimplementedWebhookExecutorServer) ListPlugins(context.Context, *ListPluginsRequest) (*ListPluginsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlugins not implemented")
}
func (UnimplementedWebhookExecutorServer) GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPluginInfo not implemented")
}
func (UnimplementedWebhookExecutorServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedWebhookExecutorServer) mustEmbedUnimplementedWebhookExecutorServer() {}
func (UnimplementedWebhookExecutorServer) testEmbeddedByValue()                         {}

// UnsafeWebhookExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookExecutorServer will
// result in compilation errors.
type UnsafeWebhookExecutorServer interface {
	mustEmbedUnimplementedWebhookExecutorServer()
}

func RegisterWebhookExecutorServer(s grpc.ServiceRegistrar, srv WebhookExecutorServer) {
	// If the following call pancis, it indicates UnimplementedWebhookExecutorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebhookExecutor_ServiceDesc, srv)
}

func _WebhookExecutor_ExecutePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookExecutorServer).ExecutePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookExecutor_ExecutePlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookExecutorServer).ExecutePlugin(ctx, req.(*ExecutePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookExecutor_ListPlugins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPluginsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookExecutorServer).ListPlugins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookExecutor_ListPlugins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookExecutorServer).ListPlugins(ctx, req.(*ListPluginsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookExecutor_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookExecutorServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookExecutor_GetPluginInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookExecutorServer).GetPluginInfo(ctx, req.(*GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookExecutor_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookExecutorServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebhookExecutor_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookExecutorServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookExecutor_ServiceDesc is the grpc.ServiceDesc for WebhookExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webhook.WebhookExecutor",
	HandlerType: (*WebhookExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutePlugin",
			Handler:    _WebhookExecutor_ExecutePlugin_Handler,
		},
		{
			MethodName: "ListPlugins",
			Handler:    _WebhookExecutor_ListPlugins_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _WebhookExecutor_GetPluginInfo_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _WebhookExecutor_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/webhook.proto",
}
