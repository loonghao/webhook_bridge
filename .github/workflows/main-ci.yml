name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

jobs:
  test:
    name: Test Go Code
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add variables to environment file
      run: cat ".github/env" >> "$GITHUB_ENV"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true

    - name: Install Protocol Buffers compiler
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update && sudo apt-get install -y protobuf-compiler
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install protobuf
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          choco install protoc
        fi
      shell: bash

    - name: Setup CI environment
      shell: bash
      run: |
        chmod +x dev/ci-setup.sh
        ./dev/ci-setup.sh

    - name: Generate protobuf code
      run: go run dev.go proto

    - name: Run tests with coverage
      run: go run dev.go test-coverage

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: go
        name: go-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        
  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    needs: dashboard  # Wait for dashboard to be built

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add variables to environment file
      run: cat ".github/env" >> "$GITHUB_ENV"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true

    - name: Install Protocol Buffers compiler
      run: |
        sudo apt-get update && sudo apt-get install -y protobuf-compiler

    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Setup CI environment
      run: |
        chmod +x dev/ci-setup.sh
        ./dev/ci-setup.sh

    - name: Generate protobuf code
      run: go run dev.go proto

    - name: Download Dashboard artifacts
      uses: actions/download-artifact@v4
      with:
        name: dashboard-build
        path: web-nextjs/

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}
        args: --timeout=5m

  dashboard:
    name: Dashboard Build & Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add variables to environment file
      run: cat ".github/env" >> "$GITHUB_ENV"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true

    - name: Check Node.js cache dependencies
      run: |
        echo "Checking package-lock.json existence..."
        ls -la web-nextjs/package-lock.json || echo "package-lock.json not found"
        echo "Working directory: $(pwd)"
        echo "Contents of web-nextjs/:"
        ls -la web-nextjs/ | head -10

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        # Disable cache temporarily to avoid path resolution issues
        # cache: 'npm'
        # cache-dependency-path: 'web-nextjs/package-lock.json'

    - name: Install Dashboard dependencies
      run: |
        cd web-nextjs
        echo "Installing npm dependencies..."
        # Check if package-lock.json is valid
        if npm ls >/dev/null 2>&1; then
          npm ci
        else
          echo "package-lock.json invalid, using npm install"
          npm install
        fi

    - name: TypeScript type checking
      run: |
        cd web-nextjs
        npm run type-check

    - name: TypeScript linting
      run: |
        cd web-nextjs
        npm run lint

    - name: Build Dashboard (Production)
      run: |
        cd web-nextjs
        npm run build || {
          echo "Dashboard build failed, creating minimal structure for embed..."
          mkdir -p dist/next/static/css dist/next/static/chunks public
          echo '<!DOCTYPE html><html><head><title>Webhook Bridge</title></head><body><h1>Dashboard</h1></body></html>' > dist/index.html
          echo "/* Minimal CSS */" > dist/next/static/css/app.css
          echo "// Minimal JS" > dist/next/static/chunks/app.js
          touch public/favicon.ico dist/favicon.ico
          echo "Minimal structure created for Go embed"
        }

    - name: Upload Dashboard artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dashboard-build
        path: |
          web-nextjs/dist/
          web-nextjs/public/
        retention-days: 30
        
  build:
    name: Build Binaries
    needs: [test, lint]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: ""
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            suffix: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            suffix: ".exe"
          - os: macos-latest
            goos: darwin
            goarch: amd64
            suffix: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            suffix: ""
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add variables to environment file
      run: cat ".github/env" >> "$GITHUB_ENV"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true

    - name: Install Protocol Buffers compiler
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update && sudo apt-get install -y protobuf-compiler
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install protobuf
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          choco install protoc
        fi

    - name: Install Go protobuf tools
      shell: bash
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Setup development environment
      shell: bash
      run: go run dev.go dev-setup

    - name: Download Dashboard artifacts
      uses: actions/download-artifact@v4
      with:
        name: dashboard-build
        path: web-nextjs/

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      shell: bash
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=$(git rev-parse --short HEAD)

        LDFLAGS="-X main.version=${VERSION}"
        LDFLAGS="${LDFLAGS} -X main.buildTime=${BUILD_TIME}"
        LDFLAGS="${LDFLAGS} -X main.goVersion=$(go version | cut -d' ' -f3)"

        # Build unified CLI
        go build -ldflags "${LDFLAGS}" -o webhook-bridge-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} ./cmd/webhook-bridge

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webhook-bridge-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          webhook-bridge-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
          web-nextjs/dist/
        retention-days: 30

  integration-test:
    name: Integration Tests
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add variables to environment file
      run: cat ".github/env" >> "$GITHUB_ENV"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Protocol Buffers compiler
      run: |
        sudo apt-get update && sudo apt-get install -y protobuf-compiler

    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate protobuf code
      run: |
        mkdir -p api/proto
        # Generate Go protobuf code
        protoc --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative \
          api/proto/webhook.proto
        # Generate Python protobuf code
        python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. api/proto/webhook.proto
        # Create necessary __init__.py files for Python package structure
        echo '"""API package for webhook bridge."""' > api/__init__.py
        echo '"""Protocol buffer definitions for webhook bridge."""' > api/proto/__init__.py
        
    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: webhook-bridge-linux-amd64

    - name: Make binary executable
      run: chmod +x webhook-bridge-linux-amd64

    - name: Run integration tests
      run: |
        # Test CLI commands
        ./webhook-bridge-linux-amd64 --help
        ./webhook-bridge-linux-amd64 version
        ./webhook-bridge-linux-amd64 status

        # Start the server in background (API-only mode for testing)
        ./webhook-bridge-linux-amd64 start --no-python --port 8080 &
        SERVER_PID=$!

        # Wait for server to start
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8080/health || echo "Health check failed"

        # Cleanup
        kill $SERVER_PID || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Add variables to environment file
      run: cat ".github/env" >> "$GITHUB_ENV"

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        check-latest: true
        cache: true

    - name: Install Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run Gosec Security Scanner
      run: |
        gosec -exclude=G204 -fmt sarif -out gosec.sarif ./... || true
        # Ensure the file exists even if gosec finds no issues
        if [ ! -f gosec.sarif ]; then
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"gosec","version":"unknown"}},"results":[]}]}' > gosec.sarif
        fi

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      if: always()

  # Python cross-platform testing
  python-cross-platform:
    name: Python Cross-Platform Tests
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'pull_request' && (
        contains(github.event.pull_request.changed_files, 'python_executor/') ||
        contains(github.event.pull_request.changed_files, 'webhook_bridge/') ||
        contains(github.event.pull_request.changed_files, 'requirements') ||
        contains(github.event.pull_request.changed_files, 'pyproject.toml') ||
        contains(github.event.pull_request.changed_files, 'noxfile.py')
      )
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ matrix.python-version }}

    - name: Run Python linting (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: uvx nox -s lint

    - name: Run Python tests with coverage
      run: uvx nox -s pytest

    - name: Upload Python coverage to Codecov (Ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
