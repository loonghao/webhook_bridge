name: Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Go Code
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.22', '1.23']
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install Protocol Buffers compiler
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update && sudo apt-get install -y protobuf-compiler
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install protobuf
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          choco install protoc
        fi
      shell: bash

    - name: Install development dependencies
      run: go run dev.go install

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Generate protobuf code
      run: go run dev.go proto

    - name: Run tests with coverage
      run: go run dev.go test-coverage
      
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.23'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: go
        name: go-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
        
  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install Protocol Buffers compiler
      run: |
        sudo apt-get update && sudo apt-get install -y protobuf-compiler

    - name: Setup development environment
      run: go run dev.go dev-setup

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m
        
  build:
    name: Build Binaries
    needs: [test, lint]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            suffix: ""
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            suffix: ""
          - os: windows-latest
            goos: windows
            goarch: amd64
            suffix: ".exe"
          - os: macos-latest
            goos: darwin
            goarch: amd64
            suffix: ""
          - os: macos-latest
            goos: darwin
            goarch: arm64
            suffix: ""
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install Protocol Buffers compiler
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          sudo apt-get update && sudo apt-get install -y protobuf-compiler
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          brew install protobuf
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          choco install protoc
        fi
      shell: bash

    - name: Setup development environment
      run: go run dev.go dev-setup
        
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=$(git rev-parse --short HEAD)
        
        LDFLAGS="-X github.com/loonghao/webhook_bridge/pkg/version.Version=${VERSION}"
        LDFLAGS="${LDFLAGS} -X github.com/loonghao/webhook_bridge/pkg/version.GitCommit=${GIT_COMMIT}"
        LDFLAGS="${LDFLAGS} -X github.com/loonghao/webhook_bridge/pkg/version.BuildDate=${BUILD_TIME}"
        
        go build -ldflags "${LDFLAGS}" -o webhook-bridge-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} ./cmd/server
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: webhook-bridge-${{ matrix.goos }}-${{ matrix.goarch }}
        path: webhook-bridge-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
        retention-days: 30

  integration-test:
    name: Integration Tests
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Protocol Buffers compiler
      run: |
        sudo apt-get update && sudo apt-get install -y protobuf-compiler

    - name: Install Go protobuf tools
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Generate protobuf code
      run: |
        mkdir -p api/proto
        # Generate Go protobuf code
        protoc --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative \
          api/proto/webhook.proto
        # Generate Python protobuf code
        python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. api/proto/webhook.proto
        
    - name: Download Linux binary
      uses: actions/download-artifact@v4
      with:
        name: webhook-bridge-linux-amd64
        
    - name: Make binary executable
      run: chmod +x webhook-bridge-linux-amd64
      
    - name: Run integration tests
      run: |
        # Start the server in background
        ./webhook-bridge-linux-amd64 &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Run integration tests
        python test_go_python_integration.py || true
        
        # Cleanup
        kill $SERVER_PID || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: true

    - name: Install Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Run Gosec Security Scanner
      run: |
        gosec -exclude=G204 -fmt sarif -out gosec.sarif ./... || true
        # Ensure the file exists even if gosec finds no issues
        if [ ! -f gosec.sarif ]; then
          echo '{"version":"2.1.0","$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"gosec","version":"unknown"}},"results":[]}]}' > gosec.sarif
        fi

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec.sarif
      if: always()

  # Python auxiliary testing (secondary priority)
  python-auxiliary:
    name: Python Auxiliary Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install 3.11

    - name: Run Python linting
      run: |
        uvx nox -s lint

    - name: Run Python tests with coverage
      run: |
        uvx nox -s pytest

    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage
        token: ${{ secrets.CODECOV_TOKEN }}
      if: always()
